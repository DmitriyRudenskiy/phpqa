{"name":"phpqa","tagline":"Analyze PHP code with one command","body":"\r\n# PHPQA CLI\r\n\r\nAnalyze PHP code with one command.\r\n\r\n[![License](https://poser.pugx.org/edgedesign/phpqa/license)](https://packagist.org/packages/edgedesign/phpqa)\r\n[![Latest Stable Version](https://poser.pugx.org/edgedesign/phpqa/v/stable)](https://packagist.org/packages/edgedesign/phpqa)\r\n[![Dependency Status](https://www.versioneye.com/user/projects/5566c1666365390010c20000/badge.svg?style=flat)](https://www.versioneye.com/user/projects/5566c1666365390010c20000)\r\n[![Build Status](https://travis-ci.org/EdgedesignCZ/phpqa.svg)](https://travis-ci.org/EdgedesignCZ/phpqa)\r\n\r\n## Requirements\r\n\r\n- PHP >= 5.4.0\r\n\r\n## Why?\r\n\r\nEvery analyzer has different arguments and options in different formats *(no surprise in PHP world :)*.\r\nIf you ever tried to get ignoring directories to work then you know what I mean. On the other hand\r\nCLI tools are cool because you can analyze any directory or file.\r\nUnfortunately [Jenkins](http://jenkins-php.org/automation.html),\r\n[Travis](https://github.com/libis/plugin-Mailer/blob/095cc1154fd6d7beb3be4425329868ecfa2043d9/.travis.yml),\r\n[Scrutiziner](https://github.com/antonbabenko/imagepush2/blob/db88b1c65a34250ba98e01d584d72421aedfaeac/.scrutinizer.yml) \r\nneeds special configuration file. What if you want to analyze every bundle in your Symfony app?\r\nWill you create e.g. Jenkins project/task for each bundle?\r\n\r\n* I want to analyze selected directory without complex configuration and creating extra files/tasks\r\n* I don't care about format of [ignored directories](https://github.com/EdgedesignCZ/phpqa/blob/master/tests/IgnoredPathsTest.php) in phploc, phpmd, ...\r\n* I don't want to update all projects when QA tool is updated or if I've found cool tool like [PHPMetrics](https://github.com/Halleck45/PhpMetrics)\r\n* I want fast execution time → tools should run in parallel ([thanks Robo](http://robo.li/tasks/Base/#parallelexec))\r\n\r\n## Available [tools](https://github.com/ziadoz/awesome-php#code-analysis)\r\n\r\nTool| Description\r\n----------------------------------------------------------------------- | ----------------------------- |\r\n[phploc](https://github.com/sebastianbergmann/phploc) | Measure the size of a PHP project |\r\n[phpcpd](https://github.com/sebastianbergmann/phpcpd) | Copy/Paste Detector (CPD) for PHP code |\r\n[phpcs](https://github.com/squizlabs/PHP_CodeSniffer) | Detect violations of a coding standard |\r\n[pdepend](https://github.com/pdepend/pdepend) | PHP adaptation of JDepend |\r\n[phpmd](https://github.com/phpmd/phpmd) | Scan PHP project for messy code |\r\n[phpmetrics](https://github.com/Halleck45/PhpMetrics) | Static analysis tool for PHP |\r\n\r\n## Install\r\n\r\n### Without composer\r\n\r\n```bash\r\n# install php-a-cli\r\ngit@github.com:EdgedesignCZ/phpqa.git\r\ncomposer install --no-dev\r\n\r\n# make phpqa is globally accessible\r\n## you can symlink binary\r\nsudo ln -s /path-to-phpqa-repository/phpqa /usr/bin/phpqa\r\n## or add this directory to your PATH in your ~/.bash_profile (or ~/.bashrc)\r\nexport PATH=~/path-to-phpqa-repository-from-pwd:$PATH\r\n```\r\n\r\n### Composer\r\n\r\n```bash\r\ncomposer global require edgedesign/phpqa --update-no-dev\r\n# Make sure you have ~/.composer/vendor/bin/ in your PATH.\r\n```\r\n\r\nOf course you can add dependency to `require-dev` section in your `composer.json`.\r\nBut I wouldn't recommend it. In my experience *one* QA tool which analyzes\r\n*N* projects is better than *N* projects with *N* analyzers. It's up to you\r\nhow many repositories you want to update when new version is released.\r\n\r\n\r\n## Analyze\r\n\r\n```bash\r\nphpqa --help\r\n\r\n# analyze current directory and save output to build directory\r\nphpqa\r\nphpqa --analyzedDir ./ --buildDir ./build\r\n\r\n# ignore selected directories and files\r\nphpqa --ignoredDirs build,vendor --ignoredFiles RoboFile.php\r\n\r\n# run selected tools\r\nphpqa --tools phploc,phpcs\r\n\r\n# show output from executed tools\r\nphpqa -v\r\nphpqa --verbose\r\n\r\n# show no output at all\r\nphpqa -q\r\nphpqa --quiet\r\n\r\n# CLI output instead of creating files (default output are files in --buildDir)\r\nphpqa --output cli\r\n\r\n# build html reports\r\nphpqa --report\r\n\r\n## show versions of available tools\r\nphpqa tools\r\n```\r\n\r\n## Jenkins integration\r\n\r\nWe use [Jenkins-CI](http://jenkins-php.org/) in Edgedesign. Below you can find examples of\r\n[Phing](https://www.phing.info/) and [Robo](http://robo.li/) tasks. Right now Edgedesign's\r\nphpmd rulesets are [“hard-coded”](https://github.com/EdgedesignCZ/phpqa/blob/master/app/phpmd.xml).\r\nThat happens when you open-source internal app ([contributions are welcomed](#contributing)).\r\n\r\n### Project with one directory\r\n\r\nTypically in Symfony project you have project with `src` directory with all the code and tests. So you don't need ignore vendors, web directory etc. \r\n\r\n**Phing - `build.xml`**\r\n\r\n```xml\r\n<target name=\"ci-phpqa\">\r\n    <exec executable=\"phpqa\" passthru=\"true\">\r\n        <arg value=\"--analyzedDir=./src\" />\r\n        <arg value=\"--buildDir=./build/logs\" />\r\n        <arg value=\"--ignoredDirs= \" />\r\n        <arg value=\"--ignoredFiles= \" />\r\n    </exec>\r\n</target>\r\n```\r\n\r\n\r\n### Project with multiple directories (src, tests, ...)\r\n\r\nWhen you analyze root directory of your project don't forget to ignore vendors and\r\nother non-code directories. Otherwise the analysis could take a very long time.\r\n\r\n**Phing - `build.xml`**\r\n\r\n```xml\r\n<target name=\"ci-phpqa\">\r\n    <exec executable=\"phpqa\" passthru=\"true\">\r\n        <arg value=\"--analyzedDir=./\" />\r\n        <arg value=\"--buildDir=./build/logs\" />\r\n        <arg value=\"--ignoredDirs=app,bin,build,vendor,web\" />\r\n        <arg value=\"--ignoredFiles= \" />\r\n        <arg value=\"--verbose\" />\r\n    </exec>\r\n</target>\r\n```\r\n\r\n**Robo - `RoboFile.php`**\r\n\r\n```php\r\npublic function ciPhpqa()\r\n{\r\n    $this->taskExec('phpqa')\r\n        ->option('verbose')\r\n        ->option('analyzedDir', './')\r\n        ->option('buildDir', './build')\r\n        ->option('ignoredDirs', 'build,bin,vendor')\r\n        ->option('ignoredFiles', 'RoboFile.php,error-handling.php')\r\n        ->run();\r\n}\r\n```\r\n\r\n## HTML reports\r\n\r\nIf you don't have Jenkins or other CI server, then you can use HTML reports.\r\nHTML files are built when you add option `--report`. Take a look at\r\n[report from phpqa]().\r\n\r\n**Robo - `RoboFile.php`**\r\n\r\n```php\r\npublic function ciPhpqa()\r\n{\r\n    $this->taskExec('phpqa')\r\n        ->option('report')\r\n        ->option('analyzedDir', './')\r\n        ->run();\r\n}\r\n```\r\n\r\n## Contributing\r\n\r\nContributions from others would be very much appreciated! Send \r\n[pull request](https://github.com/EdgedesignCZ/phpqa/pulls)/\r\n[issue](https://github.com/EdgedesignCZ/phpqa/issues). Thanks!\r\n\r\n## License\r\n\r\nCopyright (c) 2015 Edgedesign.cz. MIT Licensed,\r\nsee [LICENSE](/LICENSE) for details.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}